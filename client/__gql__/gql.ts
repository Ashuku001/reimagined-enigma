/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation addBillboard($billboard: BillboardInput!) {\n  addBillboard(billboard: $billboard) {\n    __typename\n    id\n    label\n    imageUrl\n    store {\n      __typename\n      id\n    }\n  }\n}": types.AddBillboardDocument,
    "mutation AddBrand($brand: BrandInput!) {\n  addBrand(brand: $brand) {\n    __typename\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}": types.AddBrandDocument,
    "mutation AddTemplateCampaign($selectedCustomers: String!, $template: String, $message: InteractiveMessageInput!) {\n  addTemplateMesBulk(\n    template: $template\n    selectedCustomers: $selectedCustomers\n    message: $message\n  ) {\n    id\n    __typename\n  }\n}": types.AddTemplateCampaignDocument,
    "mutation addBulkTemplateTask($schedule: ScheduleTaskInput!) {\n  addBulkTemplateTask(schedule: $schedule) {\n    id\n    type\n    timestamp\n    bulkTempTask {\n      id\n      customers\n      message\n      template\n    }\n  }\n}": types.AddBulkTemplateTaskDocument,
    "mutation AddButtonRepliedMessage($message: ButtonRepliedInput!, $participants: ParticipantsInput, $contextMessage: ContextMessageInput) {\n  addButtonRepliedMessage(\n    message: $message\n    participants: $participants\n    contextMessage: $contextMessage\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    mesBtnReply {\n      __typename\n      id\n      buttonReply {\n        __typename\n        id\n        header\n        btnImageHead {\n          __typename\n          link\n        }\n        product {\n          __typename\n          name\n          store {\n            __typename\n            name\n            id\n          }\n        }\n        buttons {\n          __typename\n          buttonId\n          title\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}": types.AddButtonRepliedMessageDocument,
    "mutation AddCategory($category: CategoryInput!) {\n  addCategory(category: $category) {\n    __typename\n    id\n    name\n    store {\n      __typename\n      id\n    }\n    billboard {\n      __typename\n      id\n    }\n  }\n}": types.AddCategoryDocument,
    "mutation addCoupon($promotion: CouponPromInput!) {\n  addCoupon(promotion: $promotion) {\n    __typename\n    id\n    name\n    description\n    discountType\n    coupon {\n      __typename\n      id\n      validFrom\n      validTo\n      discount\n      active\n      createdAt\n      updatedAt\n    }\n  }\n}": types.AddCouponDocument,
    "mutation AddCustomer($customer: CustomerInput!) {\n  addCustomer(customer: $customer) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    __typename\n  }\n}": types.AddCustomerDocument,
    "mutation AddDiscount($discount: DiscountPromInput!) {\n  addDiscount(discount: $discount) {\n    __typename\n    id\n    name\n    startDate\n    endDate\n    description\n    discountType\n    active\n    discountValue\n    createdAt\n    updatedAt\n  }\n}": types.AddDiscountDocument,
    "mutation AddDocumentMessage($message: DocumentMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addDocumentMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    document {\n      __typename\n      url\n      sha256\n      filename\n      mimeType\n      documentId\n      caption\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}": types.AddDocumentMessageDocument,
    "mutation AddImageMessage($message: ImageMessageInput!, $template: String, $customerId: Int) {\n  addImageMessage(message: $message, template: $template, customerId: $customerId) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    image {\n      __typename\n      url\n      caption\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}": types.AddImageMessageDocument,
    "mutation AddInteractiveButtonMessage($message: InteractiveMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addInteractiveButtonMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    interactive {\n      __typename\n      id\n      type\n      button {\n        __typename\n        id\n        header\n        btnImageHead {\n          __typename\n          link\n        }\n        btnTextHead {\n          __typename\n          body\n        }\n        body\n        footer\n        action\n        buttons {\n          __typename\n          buttonId\n          title\n        }\n        product {\n          __typename\n          id\n          name\n          store {\n            __typename\n            id\n            name\n          }\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}": types.AddInteractiveButtonMessageDocument,
    "mutation AddInteractiveListMessage($message: InteractiveMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addInteractiveListMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    interactive {\n      __typename\n      id\n      type\n      list {\n        __typename\n        id\n        header\n        listTextHead {\n          __typename\n          body\n        }\n        body\n        button\n        sections {\n          __typename\n          title\n          rows {\n            __typename\n            id\n            buttonId\n            title\n            description\n            product {\n              __typename\n              id\n              name\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}": types.AddInteractiveListMessageDocument,
    "mutation AddInteractiveTemplateMessage($message: InteractiveMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addInteractiveTemplateMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    interactive {\n      __typename\n      id\n      type\n      template {\n        __typename\n        id\n        header\n        tempImageHead {\n          __typename\n          link\n        }\n        body\n        action\n        tempProduct {\n          __typename\n          name\n          store {\n            __typename\n            name\n            id\n          }\n        }\n        buttons {\n          __typename\n          text\n          id\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}": types.AddInteractiveTemplateMessageDocument,
    "mutation AddMpesa($mpesa: MpesaSettingInput!) {\n  addMpesa(mpesa: $mpesa) {\n    id\n    consumer_key\n    consumer_secret\n    pass_key\n    business_shortcode\n    account_reference\n    transaction_desc\n  }\n}": types.AddMpesaDocument,
    "mutation AddOrder($order: OrderInput!, $storeId: Int!) {\n  addOrder(order: $order, storeId: $storeId) {\n    id\n    isPaid\n    phone\n    orderItems {\n      id\n      orderProduct {\n        name\n      }\n    }\n  }\n}": types.AddOrderDocument,
    "mutation AddProduct($product: ProductInput!) {\n  addProduct(product: $product) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n  }\n}": types.AddProductDocument,
    "mutation AddProdVariation($product: ProductInput) {\n  addProductVariations(product: $product) {\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    brand {\n      id\n      name\n    }\n    description\n    stockCode\n    prodVariations {\n      name\n      prodVarOptions {\n        value\n      }\n    }\n    prodCombinations {\n      price\n      sku\n      combinationString\n      availableStock\n      variantImage {\n        link\n      }\n    }\n  }\n}": types.AddProdVariationDocument,
    "mutation addSetting($setting: SettingInput!) {\n  addSetting(setting: $setting) {\n    __typename\n    callBack_url\n    access_token\n    app_id\n    app_secret\n    phone_number_id\n    business_account_id\n    access_token\n    api_version\n    webhook_verification_token\n    phone_number\n  }\n}": types.AddSettingDocument,
    "mutation AddStore($store: StoreInput!) {\n  addStore(store: $store) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}": types.AddStoreDocument,
    "mutation AddStripe($stripe: StripeSettingInput!) {\n  addStripe(stripe: $stripe) {\n    id\n    callback_url\n    webhook_secret\n    api_key\n  }\n}": types.AddStripeDocument,
    "mutation AddTextMessage($message: TextMessageInput!, $participants: ParticipantsInput, $customerId: Int, $template: String) {\n  addTextMessage(\n    message: $message\n    participants: $participants\n    customerId: $customerId\n    template: $template\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    hasContext\n    timestamp\n    createdAt\n    text {\n      __typename\n      body\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}": types.AddTextMessageDocument,
    "mutation AddVideoMessage($message: VideoMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addVideoMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    video {\n      __typename\n      url\n      sha256\n      mimeType\n      videoId\n      caption\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}": types.AddVideoMessageDocument,
    "query CustomerChatSearch($page: Int, $limit: Int, $text: String!) {\n  customerChatSearch(page: $page, limit: $limit, text: $text) {\n    customers {\n      __typename\n      id\n      first_name\n      last_name\n      phone_number\n    }\n    chats {\n      __typename\n      id\n      customer {\n        __typename\n        id\n        first_name\n        last_name\n        phone_number\n      }\n      lastMessage {\n        __typename\n        id\n        from_customer\n        type\n        timestamp\n        createdAt\n        text {\n          body\n        }\n      }\n    }\n  }\n}": types.CustomerChatSearchDocument,
    "query CustomerSearch($page: Int, $limit: Int, $text: String!) {\n  customerSearch(page: $page, limit: $limit, text: $text) {\n    id\n    first_name\n    last_name\n    customerSegment\n    incomeCategory\n    phone_number\n    age\n    gender\n  }\n}": types.CustomerSearchDocument,
    "query CustomersSearch($page: Int, $limit: Int, $text: String!) {\n  customersSearch(page: $page, limit: $limit, text: $text) {\n    __typename\n    id\n    first_name\n    last_name\n    phone_number\n  }\n}": types.CustomersSearchDocument,
    "mutation deleteBillboard($billboardId: Int!, $storeId: Int!) {\n  deleteBillboard(billboardId: $billboardId, storeId: $storeId) {\n    response\n  }\n}": types.DeleteBillboardDocument,
    "mutation DeleteBrand($storeId: Int!, $brandId: Int!) {\n  deleteBrand(storeId: $storeId, brandId: $brandId) {\n    response\n  }\n}": types.DeleteBrandDocument,
    "mutation DeleteCategory($categoryId: Int!, $storeId: Int!) {\n  deleteCategory(categoryId: $categoryId, storeId: $storeId) {\n    response\n  }\n}": types.DeleteCategoryDocument,
    "mutation DeleteCoupon($promotionId: Int!, $storeId: Int!) {\n  deleteCoupon(promotionId: $promotionId, storeId: $storeId)\n}": types.DeleteCouponDocument,
    "mutation DeleteDiscount($promotionId: Int!, $storeId: Int!) {\n  deleteDiscount(promotionId: $promotionId, storeId: $storeId)\n}": types.DeleteDiscountDocument,
    "mutation DeleteMpesa($mpesaId: Int!, $storeId: Int!) {\n  deleteMpesa(mpesaId: $mpesaId, storeId: $storeId) {\n    response\n  }\n}": types.DeleteMpesaDocument,
    "mutation DeleteProduct($productId: Int!, $storeId: Int!) {\n  deleteProduct(productId: $productId, storeId: $storeId) {\n    response\n  }\n}": types.DeleteProductDocument,
    "mutation DeleteStore($storeId: Int!) {\n  deleteStore(storeId: $storeId) {\n    response\n  }\n}": types.DeleteStoreDocument,
    "mutation DeleteStripe($stripeId: Int!, $storeId: Int!) {\n  deleteStripe(stripeId: $stripeId, storeId: $storeId) {\n    response\n  }\n}": types.DeleteStripeDocument,
    "query GetAds {\n  ads {\n    __typename\n    id\n    read\n    delivered\n    sent\n    failed\n    response\n    updatedAt\n    adTemplate {\n      __typename\n      id\n      name\n    }\n  }\n}": types.GetAdsDocument,
    "query GetCustomers {\n  customers {\n    id\n    whatsapp_name\n    phone_number\n    first_name\n    last_name\n    age\n    gender\n    incomeCategory\n    customerSegment\n    occupation\n    joinDate\n    lastPromoted\n    status\n    createdAt\n    customerLoyalty {\n      pointsBalance\n    }\n  }\n}": types.GetCustomersDocument,
    "query GetAllProducts {\n  allProducts {\n    __typename\n    id\n    name\n    products {\n      __typename\n      id\n      name\n      price\n    }\n  }\n}": types.GetAllProductsDocument,
    "query GetAllStores {\n  stores {\n    __typename\n    id\n    name\n  }\n}": types.GetAllStoresDocument,
    "query GetBillboard($billboardId: Int!) {\n  billboard(billboardId: $billboardId) {\n    __typename\n    id\n    label\n    imageUrl\n    store {\n      __typename\n      id\n    }\n  }\n}": types.GetBillboardDocument,
    "query GetBillboards($storeId: Int!) {\n  billboards(storeId: $storeId) {\n    __typename\n    id\n    label\n    updatedAt\n  }\n}": types.GetBillboardsDocument,
    "query GetBrand($brandId: Int!) {\n  brand(brandId: $brandId) {\n    __typename\n    id\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}": types.GetBrandDocument,
    "query GetBrands($storeId: Int!) {\n  brands(storeId: $storeId) {\n    __typename\n    id\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}": types.GetBrandsDocument,
    "query GetCategories($storeId: Int!) {\n  categories(storeId: $storeId) {\n    __typename\n    id\n    name\n    updatedAt\n    billboard {\n      __typename\n      id\n      label\n    }\n  }\n}": types.GetCategoriesDocument,
    "query GetCategory($categoryId: Int!) {\n  category(categoryId: $categoryId) {\n    __typename\n    id\n    name\n    billboard {\n      __typename\n      id\n      label\n      imageUrl\n    }\n  }\n}": types.GetCategoryDocument,
    "query GetChat($chatId: Int!) {\n  chat(chatId: $chatId) {\n    conversations {\n      id\n      category\n      status\n      pricingModel\n      expiryDate\n    }\n    messages {\n      __typename\n      id\n      from_customer\n      type\n      timestamp\n      messageId\n      status\n      isAd\n      hasContext\n      context {\n        __typename\n        id\n        type\n        messageId\n        text {\n          __typename\n          body\n        }\n        video {\n          __typename\n          caption\n          url\n          mimeType\n        }\n        image {\n          __typename\n          caption\n          url\n        }\n        document {\n          __typename\n          url\n          caption\n          filename\n        }\n        interactive {\n          __typename\n          type\n          button {\n            __typename\n            body\n            product {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n              }\n            }\n          }\n          template {\n            __typename\n            id\n            body\n            tempProduct {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      text {\n        __typename\n        body\n      }\n      image {\n        __typename\n        caption\n        url\n      }\n      video {\n        __typename\n        caption\n        url\n        mimeType\n      }\n      document {\n        __typename\n        url\n        caption\n        filename\n        mimeType\n      }\n      interactive {\n        __typename\n        id\n        type\n        button {\n          __typename\n          id\n          header\n          btnImageHead {\n            __typename\n            link\n          }\n          btnTextHead {\n            __typename\n            body\n          }\n          body\n          footer\n          action\n          buttons {\n            __typename\n            buttonId\n            title\n          }\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        template {\n          __typename\n          id\n          header\n          tempImageHead {\n            __typename\n            link\n          }\n          tempTextHead {\n            __typename\n            body\n          }\n          body\n          action\n          buttons {\n            __typename\n            text\n          }\n          tempProduct {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        list {\n          __typename\n          id\n          header\n          listTextHead {\n            __typename\n            body\n          }\n          body\n          button\n          footer\n          sections {\n            __typename\n            title\n            rows {\n              __typename\n              id\n              buttonId\n              title\n              description\n              product {\n                __typename\n                id\n                name\n                price\n                store {\n                  __typename\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      mesListReply {\n        __typename\n        id\n        buttonId\n        title\n        description\n        listReply {\n          __typename\n          id\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              id\n              name\n            }\n          }\n        }\n      }\n      mesBtnReply {\n        __typename\n        id\n        title\n        buttonId\n        buttonReply {\n          __typename\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      mesTempReply {\n        __typename\n        id\n        text\n        tempReply {\n          __typename\n          tempProduct {\n            __typename\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      messageAd {\n        __typename\n        id\n        read\n        delivered\n        failed\n        sent\n        response\n      }\n      createdAt\n    }\n  }\n}": types.GetChatDocument,
    "query GetConversation($chatId: Int!) {\n  chat(chatId: $chatId) {\n    conversations {\n      id\n      category\n      status\n      pricingModel\n      expiryDate\n    }\n  }\n}": types.GetConversationDocument,
    "query GetChats {\n  chats {\n    __typename\n    id\n    customer {\n      __typename\n      id\n      whatsapp_name\n      phone_number\n      first_name\n      last_name\n    }\n    status\n  }\n}": types.GetChatsDocument,
    "query GetCusInChatInfo($chatId: Int!) {\n  chat(chatId: $chatId) {\n    customer {\n      __typename\n      id\n      first_name\n      last_name\n      phone_number\n    }\n  }\n}": types.GetCusInChatInfoDocument,
    "query GetCustomer($customerId: Int!) {\n  customer(customerId: $customerId) {\n    id\n    whatsapp_name\n    phone_number\n    first_name\n    last_name\n    age\n    gender\n    incomeCategory\n    customerSegment\n    occupation\n    joinDate\n    lastPromoted\n    status\n    createdAt\n    customerLoyalty {\n      pointsBalance\n    }\n  }\n}": types.GetCustomerDocument,
    "query GetCustomer360($customerId: Int!) {\n  customer360(customerId: $customerId) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    createdAt\n    customerOrder {\n      __typename\n      orderID\n      id\n      isPaid\n      phone\n      address\n      status\n      updatedAt\n      orderItems {\n        id\n        price\n        quantity\n        orderProduct {\n          id\n          name\n        }\n      }\n      storeOrder {\n        __typename\n        id\n        name\n      }\n    }\n    __typename\n  }\n}": types.GetCustomer360Document,
    "query GetCustomerInfo($customerId: Int!) {\n  customer(customerId: $customerId) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    createdAt\n    __typename\n  }\n}": types.GetCustomerInfoDocument,
    "query LastMessage($chatId: Int!) {\n  lastMessage(chatId: $chatId) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    status\n    text {\n      __typename\n      body\n    }\n    image {\n      __typename\n      caption\n    }\n    document {\n      __typename\n      filename\n    }\n    video {\n      __typename\n      caption\n    }\n    interactive {\n      __typename\n      type\n      button {\n        __typename\n        body\n        footer\n      }\n      list {\n        __typename\n        body\n        button\n        footer\n      }\n      template {\n        __typename\n        body\n      }\n    }\n    mesListReply {\n      __typename\n      title\n      description\n      listReply {\n        __typename\n        product {\n          __typename\n          name\n          price\n        }\n      }\n    }\n    mesBtnReply {\n      __typename\n      title\n      buttonReply {\n        __typename\n        product {\n          name\n          price\n        }\n      }\n    }\n    mesTempReply {\n      __typename\n      text\n      tempReply {\n        __typename\n        tempProduct {\n          __typename\n          name\n          price\n        }\n      }\n    }\n  }\n}": types.LastMessageDocument,
    "query GetCurrentMerchant {\n  currentMerchant {\n    __typename\n    id\n    business_name\n    username\n  }\n}": types.GetCurrentMerchantDocument,
    "query GetMpesa($storeId: Int!) {\n  mpesa(storeId: $storeId) {\n    id\n    consumer_key\n    consumer_secret\n    pass_key\n    business_shortcode\n    account_reference\n    transaction_desc\n    callback_url\n  }\n}": types.GetMpesaDocument,
    "query GetOrders($storeId: Int!) {\n  orders(storeId: $storeId) {\n    id\n    phone\n    isPaid\n    address\n    orderID\n    customerOrder {\n      first_name\n      last_name\n    }\n    orderItems {\n      id\n      price\n      quantity\n      orderProduct {\n        id\n        name\n        brand {\n          id\n          name\n        }\n        category {\n          name\n        }\n      }\n    }\n    createdAt\n  }\n}": types.GetOrdersDocument,
    "query GetProduct($productId: Int!) {\n  product(productId: $productId) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    stockCode\n    description\n    brand {\n      id\n      name\n    }\n    images {\n      __typename\n      id\n      url\n    }\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n    prodVariations {\n      name\n      prodVarOptions {\n        value\n      }\n    }\n    prodCombinations {\n      price\n      sku\n      combinationString\n      availableStock\n      variantImage {\n        link\n      }\n    }\n  }\n}": types.GetProductDocument,
    "query GetProducts($storeId: Int!, $categoryId: Int) {\n  products(storeId: $storeId, categoryId: $categoryId) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    updatedAt\n    description\n    stockCode\n    brand {\n      id\n      name\n    }\n    images {\n      __typename\n      id\n      url\n    }\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n  }\n}": types.GetProductsDocument,
    "query GetProductsOfIds($productsIds: [Int], $storeId: Int) {\n  productsIds(productIds: $productsIds, storeId: $storeId) {\n    id\n    name\n    price\n  }\n}": types.GetProductsOfIdsDocument,
    "query GetProductsOnly($storeId: Int!) {\n  products(storeId: $storeId) {\n    __typename\n    id\n    name\n    price\n    isFeatured\n    updatedAt\n  }\n}": types.GetProductsOnlyDocument,
    "query GetPromotions($storeId: Int!) {\n  promotions(storeId: $storeId) {\n    __typename\n    id\n    name\n    startDate\n    endDate\n    description\n    discountType\n    active\n    discountValue\n    coupon {\n      __typename\n      id\n      code\n      validFrom\n      validTo\n      discount\n      active\n      createdAt\n    }\n    createdAt\n  }\n}": types.GetPromotionsDocument,
    "query GetSetting($username: String) {\n  setting(username: $username) {\n    __typename\n    callBack_url\n    app_id\n    phone_number_id\n    business_account_id\n    access_token\n    app_secret\n    api_version\n    webhook_verification_token\n    phone_number\n  }\n}": types.GetSettingDocument,
    "query GetStore($storeId: Int) {\n  store(storeId: $storeId) {\n    __typename\n    id\n    name\n  }\n}": types.GetStoreDocument,
    "query GetStripe($storeId: Int!) {\n  stripe(storeId: $storeId) {\n    id\n    api_key\n    webhook_secret\n    callback_url\n  }\n}": types.GetStripeDocument,
    "query GetTempMarketResponse($adTemplateId: Int!) {\n  tempMarketResponse(adTemplateId: $adTemplateId) {\n    id\n    name\n    leads\n    adTempProduct {\n      id\n      name\n      price\n      images {\n        id\n        url\n      }\n      store {\n        id\n        name\n      }\n    }\n    adTempMessage {\n      id\n      interactive {\n        template {\n          buttons {\n            text\n          }\n        }\n      }\n    }\n    adTempResponses {\n      id\n      cusTempLead {\n        id\n        phone_number\n        first_name\n        last_name\n      }\n      mesTempLead {\n        id\n        createdAt\n        chat {\n          id\n        }\n        mesTempReply {\n          text\n        }\n      }\n    }\n  }\n}": types.GetTempMarketResponseDocument,
    "mutation loginMerchant($username: String!, $password: String!) {\n  loginMerchant(username: $username, password: $password) {\n    __typename\n    token\n    merchant {\n      __typename\n      id\n    }\n  }\n}": types.LoginMerchantDocument,
    "query ProductSearch($page: Int, $limit: Int, $text: String!, $storeId: Int!) {\n  productSearch(page: $page, limit: $limit, text: $text, storeId: $storeId) {\n    id\n    name\n    description\n    price\n    category {\n      name\n    }\n    images {\n      url\n    }\n  }\n}": types.ProductSearchDocument,
    "mutation signupMerchant($username: String!, $password: String!, $email: String, $whatsapp_phone_number: String!) {\n  signupMerchant(\n    username: $username\n    password: $password\n    email: $email\n    whatsapp_phone_number: $whatsapp_phone_number\n  ) {\n    token\n    merchant {\n      __typename\n      id\n    }\n    __typename\n  }\n}": types.SignupMerchantDocument,
    "subscription chatAdded($merchantId: Int!) {\n  chatAdded(merchantId: $merchantId) {\n    id\n    customer {\n      id\n      first_name\n      last_name\n      phone_number\n      whatsapp_name\n    }\n    messages {\n      __typename\n      id\n      from_customer\n      type\n      timestamp\n      messageId\n      status\n      isAd\n      hasContext\n      context {\n        __typename\n        id\n        type\n        messageId\n        text {\n          __typename\n          body\n        }\n        video {\n          __typename\n          caption\n          url\n          mimeType\n        }\n        image {\n          __typename\n          caption\n          url\n        }\n        document {\n          __typename\n          url\n          caption\n          filename\n        }\n        interactive {\n          __typename\n          type\n          button {\n            __typename\n            body\n            product {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n              }\n            }\n          }\n          template {\n            __typename\n            id\n            body\n            tempProduct {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      text {\n        __typename\n        body\n      }\n      image {\n        __typename\n        caption\n        url\n      }\n      video {\n        __typename\n        caption\n        url\n        mimeType\n      }\n      document {\n        __typename\n        url\n        caption\n        filename\n        mimeType\n      }\n      interactive {\n        __typename\n        id\n        type\n        button {\n          __typename\n          id\n          header\n          btnImageHead {\n            __typename\n            link\n          }\n          btnTextHead {\n            __typename\n            body\n          }\n          body\n          footer\n          action\n          buttons {\n            __typename\n            buttonId\n            title\n          }\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        template {\n          __typename\n          id\n          header\n          tempImageHead {\n            __typename\n            link\n          }\n          tempTextHead {\n            __typename\n            body\n          }\n          body\n          action\n          buttons {\n            __typename\n            text\n          }\n          tempProduct {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        list {\n          __typename\n          id\n          header\n          listTextHead {\n            __typename\n            body\n          }\n          body\n          button\n          footer\n          sections {\n            __typename\n            title\n            rows {\n              __typename\n              id\n              buttonId\n              title\n              description\n              product {\n                __typename\n                id\n                name\n                price\n                store {\n                  __typename\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      mesListReply {\n        __typename\n        id\n        buttonId\n        title\n        description\n        listReply {\n          __typename\n          id\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              id\n              name\n            }\n          }\n        }\n      }\n      mesBtnReply {\n        __typename\n        id\n        title\n        buttonId\n        buttonReply {\n          __typename\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      mesTempReply {\n        __typename\n        id\n        text\n        tempReply {\n          __typename\n          tempProduct {\n            __typename\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      messageAd {\n        __typename\n        id\n        read\n        delivered\n        failed\n        sent\n      }\n      createdAt\n    }\n  }\n}": types.ChatAddedDocument,
    "subscription messageAdded($chatId: Int!) {\n  messageAdded(chatId: $chatId) {\n    message {\n      __typename\n      id\n      from_customer\n      type\n      timestamp\n      messageId\n      status\n      isAd\n      hasContext\n      context {\n        __typename\n        id\n        type\n        messageId\n        text {\n          __typename\n          body\n        }\n        video {\n          __typename\n          caption\n          url\n          mimeType\n        }\n        image {\n          __typename\n          caption\n          url\n        }\n        document {\n          __typename\n          url\n          caption\n          filename\n        }\n        interactive {\n          __typename\n          type\n          button {\n            __typename\n            body\n            product {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n              }\n            }\n          }\n          template {\n            __typename\n            id\n            body\n            tempProduct {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      text {\n        __typename\n        body\n      }\n      image {\n        __typename\n        caption\n        url\n      }\n      video {\n        __typename\n        caption\n        url\n        mimeType\n      }\n      document {\n        __typename\n        url\n        caption\n        filename\n        mimeType\n      }\n      interactive {\n        __typename\n        id\n        type\n        button {\n          __typename\n          id\n          header\n          btnImageHead {\n            __typename\n            link\n          }\n          btnTextHead {\n            __typename\n            body\n          }\n          body\n          footer\n          action\n          buttons {\n            __typename\n            buttonId\n            title\n          }\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        template {\n          __typename\n          id\n          header\n          tempImageHead {\n            __typename\n            link\n          }\n          tempTextHead {\n            __typename\n            body\n          }\n          body\n          action\n          buttons {\n            __typename\n            text\n          }\n          tempProduct {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        list {\n          __typename\n          id\n          header\n          listTextHead {\n            __typename\n            body\n          }\n          body\n          button\n          footer\n          sections {\n            __typename\n            title\n            rows {\n              __typename\n              id\n              buttonId\n              title\n              description\n              product {\n                __typename\n                id\n                name\n                price\n                store {\n                  __typename\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      mesListReply {\n        __typename\n        id\n        buttonId\n        title\n        description\n        listReply {\n          __typename\n          id\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              id\n              name\n            }\n          }\n        }\n      }\n      mesBtnReply {\n        __typename\n        id\n        title\n        buttonId\n        buttonReply {\n          __typename\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      mesTempReply {\n        __typename\n        id\n        text\n        tempReply {\n          __typename\n          tempProduct {\n            __typename\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      messageAd {\n        __typename\n        id\n        read\n        delivered\n        failed\n        sent\n      }\n      createdAt\n    }\n  }\n}": types.MessageAddedDocument,
    "mutation UpdateBillboard($billboardId: Int!, $payload: BillboardInput!) {\n  updateBillboard(billboardId: $billboardId, payload: $payload) {\n    __typename\n    id\n    label\n    imageUrl\n    store {\n      __typename\n      id\n    }\n  }\n}": types.UpdateBillboardDocument,
    "mutation UpdateBrand($payload: BrandInput!, $brandId: Int!) {\n  updateBrand(payload: $payload, brandId: $brandId) {\n    __typename\n    id\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}": types.UpdateBrandDocument,
    "mutation UpdateCategory($categoryId: Int!, $payload: CategoryInput!) {\n  updateCategory(categoryId: $categoryId, payload: $payload) {\n    __typename\n    id\n    name\n    billboard {\n      __typename\n      id\n    }\n    store {\n      __typename\n      id\n    }\n  }\n}": types.UpdateCategoryDocument,
    "mutation UpdateCoupon($promotionId: Int!, $payload: CouponPromInput) {\n  updateCoupon(promotionId: $promotionId, payload: $payload) {\n    __typename\n    id\n    name\n    description\n    discountType\n    coupon {\n      __typename\n      id\n      validFrom\n      validTo\n      discount\n      active\n      createdAt\n      updatedAt\n    }\n  }\n}": types.UpdateCouponDocument,
    "mutation UpdateCustomer($customerId: Int!, $payload: CustomerInput!) {\n  updateCustomer(customerId: $customerId, payload: $payload) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    __typename\n  }\n}": types.UpdateCustomerDocument,
    "mutation UpdateDiscount($promotionId: Int!, $payload: DiscountPromInput) {\n  updateDiscount(promotionId: $promotionId, payload: $payload) {\n    __typename\n    id\n    name\n    startDate\n    endDate\n    description\n    discountType\n    active\n    discountValue\n    createdAt\n    updatedAt\n  }\n}": types.UpdateDiscountDocument,
    "mutation UpdateMessageStatus($id: Int!, $messageId: String) {\n  updateMessageStatus(id: $id, messageId: $messageId) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    status\n    messageId\n    text {\n      __typename\n      body\n    }\n    image {\n      __typename\n      caption\n      url\n    }\n    createdAt\n  }\n}": types.UpdateMessageStatusDocument,
    "mutation UpdateMpesa($mpesaId: Int!, $payload: MpesaSettingInput!) {\n  updateMpesa(mpesaId: $mpesaId, payload: $payload) {\n    id\n    consumer_key\n    consumer_secret\n    pass_key\n    business_shortcode\n    account_reference\n    transaction_desc\n  }\n}": types.UpdateMpesaDocument,
    "mutation UpdateOrderCheckout($orderId: Int!, $storeId: Int!, $payload: OrderCheckoutInput!) {\n  updateOrderCheckout(orderId: $orderId, storeId: $storeId, payload: $payload) {\n    id\n    isPaid\n    phone\n    storeOrder {\n      id\n      name\n    }\n    customerOrder {\n      id\n      phone_number\n    }\n    orderItems {\n      id\n      productId\n      quantity\n    }\n  }\n}": types.UpdateOrderCheckoutDocument,
    "mutation UpdateProduct($productId: Int!, $payload: ProductInput!) {\n  updateProduct(productId: $productId, payload: $payload) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    brand {\n      id\n      name\n    }\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n  }\n}": types.UpdateProductDocument,
    "mutation updateStore($storeId: Int!, $payload: StoreInput!) {\n  updateStore(storeId: $storeId, payload: $payload) {\n    __typename\n    id\n    name\n  }\n}": types.UpdateStoreDocument,
    "mutation UpdateStripe($stripeId: Int!, $payload: StripeSettingInput!) {\n  updateStripe(stripeId: $stripeId, payload: $payload) {\n    id\n    api_key\n    callback_url\n    webhook_secret\n  }\n}": types.UpdateStripeDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation addBillboard($billboard: BillboardInput!) {\n  addBillboard(billboard: $billboard) {\n    __typename\n    id\n    label\n    imageUrl\n    store {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation addBillboard($billboard: BillboardInput!) {\n  addBillboard(billboard: $billboard) {\n    __typename\n    id\n    label\n    imageUrl\n    store {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddBrand($brand: BrandInput!) {\n  addBrand(brand: $brand) {\n    __typename\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}"): (typeof documents)["mutation AddBrand($brand: BrandInput!) {\n  addBrand(brand: $brand) {\n    __typename\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddTemplateCampaign($selectedCustomers: String!, $template: String, $message: InteractiveMessageInput!) {\n  addTemplateMesBulk(\n    template: $template\n    selectedCustomers: $selectedCustomers\n    message: $message\n  ) {\n    id\n    __typename\n  }\n}"): (typeof documents)["mutation AddTemplateCampaign($selectedCustomers: String!, $template: String, $message: InteractiveMessageInput!) {\n  addTemplateMesBulk(\n    template: $template\n    selectedCustomers: $selectedCustomers\n    message: $message\n  ) {\n    id\n    __typename\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation addBulkTemplateTask($schedule: ScheduleTaskInput!) {\n  addBulkTemplateTask(schedule: $schedule) {\n    id\n    type\n    timestamp\n    bulkTempTask {\n      id\n      customers\n      message\n      template\n    }\n  }\n}"): (typeof documents)["mutation addBulkTemplateTask($schedule: ScheduleTaskInput!) {\n  addBulkTemplateTask(schedule: $schedule) {\n    id\n    type\n    timestamp\n    bulkTempTask {\n      id\n      customers\n      message\n      template\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddButtonRepliedMessage($message: ButtonRepliedInput!, $participants: ParticipantsInput, $contextMessage: ContextMessageInput) {\n  addButtonRepliedMessage(\n    message: $message\n    participants: $participants\n    contextMessage: $contextMessage\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    mesBtnReply {\n      __typename\n      id\n      buttonReply {\n        __typename\n        id\n        header\n        btnImageHead {\n          __typename\n          link\n        }\n        product {\n          __typename\n          name\n          store {\n            __typename\n            name\n            id\n          }\n        }\n        buttons {\n          __typename\n          buttonId\n          title\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation AddButtonRepliedMessage($message: ButtonRepliedInput!, $participants: ParticipantsInput, $contextMessage: ContextMessageInput) {\n  addButtonRepliedMessage(\n    message: $message\n    participants: $participants\n    contextMessage: $contextMessage\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    mesBtnReply {\n      __typename\n      id\n      buttonReply {\n        __typename\n        id\n        header\n        btnImageHead {\n          __typename\n          link\n        }\n        product {\n          __typename\n          name\n          store {\n            __typename\n            name\n            id\n          }\n        }\n        buttons {\n          __typename\n          buttonId\n          title\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddCategory($category: CategoryInput!) {\n  addCategory(category: $category) {\n    __typename\n    id\n    name\n    store {\n      __typename\n      id\n    }\n    billboard {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation AddCategory($category: CategoryInput!) {\n  addCategory(category: $category) {\n    __typename\n    id\n    name\n    store {\n      __typename\n      id\n    }\n    billboard {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation addCoupon($promotion: CouponPromInput!) {\n  addCoupon(promotion: $promotion) {\n    __typename\n    id\n    name\n    description\n    discountType\n    coupon {\n      __typename\n      id\n      validFrom\n      validTo\n      discount\n      active\n      createdAt\n      updatedAt\n    }\n  }\n}"): (typeof documents)["mutation addCoupon($promotion: CouponPromInput!) {\n  addCoupon(promotion: $promotion) {\n    __typename\n    id\n    name\n    description\n    discountType\n    coupon {\n      __typename\n      id\n      validFrom\n      validTo\n      discount\n      active\n      createdAt\n      updatedAt\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddCustomer($customer: CustomerInput!) {\n  addCustomer(customer: $customer) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    __typename\n  }\n}"): (typeof documents)["mutation AddCustomer($customer: CustomerInput!) {\n  addCustomer(customer: $customer) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    __typename\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddDiscount($discount: DiscountPromInput!) {\n  addDiscount(discount: $discount) {\n    __typename\n    id\n    name\n    startDate\n    endDate\n    description\n    discountType\n    active\n    discountValue\n    createdAt\n    updatedAt\n  }\n}"): (typeof documents)["mutation AddDiscount($discount: DiscountPromInput!) {\n  addDiscount(discount: $discount) {\n    __typename\n    id\n    name\n    startDate\n    endDate\n    description\n    discountType\n    active\n    discountValue\n    createdAt\n    updatedAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddDocumentMessage($message: DocumentMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addDocumentMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    document {\n      __typename\n      url\n      sha256\n      filename\n      mimeType\n      documentId\n      caption\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation AddDocumentMessage($message: DocumentMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addDocumentMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    document {\n      __typename\n      url\n      sha256\n      filename\n      mimeType\n      documentId\n      caption\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddImageMessage($message: ImageMessageInput!, $template: String, $customerId: Int) {\n  addImageMessage(message: $message, template: $template, customerId: $customerId) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    image {\n      __typename\n      url\n      caption\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation AddImageMessage($message: ImageMessageInput!, $template: String, $customerId: Int) {\n  addImageMessage(message: $message, template: $template, customerId: $customerId) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    image {\n      __typename\n      url\n      caption\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddInteractiveButtonMessage($message: InteractiveMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addInteractiveButtonMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    interactive {\n      __typename\n      id\n      type\n      button {\n        __typename\n        id\n        header\n        btnImageHead {\n          __typename\n          link\n        }\n        btnTextHead {\n          __typename\n          body\n        }\n        body\n        footer\n        action\n        buttons {\n          __typename\n          buttonId\n          title\n        }\n        product {\n          __typename\n          id\n          name\n          store {\n            __typename\n            id\n            name\n          }\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation AddInteractiveButtonMessage($message: InteractiveMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addInteractiveButtonMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    interactive {\n      __typename\n      id\n      type\n      button {\n        __typename\n        id\n        header\n        btnImageHead {\n          __typename\n          link\n        }\n        btnTextHead {\n          __typename\n          body\n        }\n        body\n        footer\n        action\n        buttons {\n          __typename\n          buttonId\n          title\n        }\n        product {\n          __typename\n          id\n          name\n          store {\n            __typename\n            id\n            name\n          }\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddInteractiveListMessage($message: InteractiveMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addInteractiveListMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    interactive {\n      __typename\n      id\n      type\n      list {\n        __typename\n        id\n        header\n        listTextHead {\n          __typename\n          body\n        }\n        body\n        button\n        sections {\n          __typename\n          title\n          rows {\n            __typename\n            id\n            buttonId\n            title\n            description\n            product {\n              __typename\n              id\n              name\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation AddInteractiveListMessage($message: InteractiveMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addInteractiveListMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    interactive {\n      __typename\n      id\n      type\n      list {\n        __typename\n        id\n        header\n        listTextHead {\n          __typename\n          body\n        }\n        body\n        button\n        sections {\n          __typename\n          title\n          rows {\n            __typename\n            id\n            buttonId\n            title\n            description\n            product {\n              __typename\n              id\n              name\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddInteractiveTemplateMessage($message: InteractiveMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addInteractiveTemplateMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    interactive {\n      __typename\n      id\n      type\n      template {\n        __typename\n        id\n        header\n        tempImageHead {\n          __typename\n          link\n        }\n        body\n        action\n        tempProduct {\n          __typename\n          name\n          store {\n            __typename\n            name\n            id\n          }\n        }\n        buttons {\n          __typename\n          text\n          id\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation AddInteractiveTemplateMessage($message: InteractiveMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addInteractiveTemplateMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    interactive {\n      __typename\n      id\n      type\n      template {\n        __typename\n        id\n        header\n        tempImageHead {\n          __typename\n          link\n        }\n        body\n        action\n        tempProduct {\n          __typename\n          name\n          store {\n            __typename\n            name\n            id\n          }\n        }\n        buttons {\n          __typename\n          text\n          id\n        }\n      }\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddMpesa($mpesa: MpesaSettingInput!) {\n  addMpesa(mpesa: $mpesa) {\n    id\n    consumer_key\n    consumer_secret\n    pass_key\n    business_shortcode\n    account_reference\n    transaction_desc\n  }\n}"): (typeof documents)["mutation AddMpesa($mpesa: MpesaSettingInput!) {\n  addMpesa(mpesa: $mpesa) {\n    id\n    consumer_key\n    consumer_secret\n    pass_key\n    business_shortcode\n    account_reference\n    transaction_desc\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddOrder($order: OrderInput!, $storeId: Int!) {\n  addOrder(order: $order, storeId: $storeId) {\n    id\n    isPaid\n    phone\n    orderItems {\n      id\n      orderProduct {\n        name\n      }\n    }\n  }\n}"): (typeof documents)["mutation AddOrder($order: OrderInput!, $storeId: Int!) {\n  addOrder(order: $order, storeId: $storeId) {\n    id\n    isPaid\n    phone\n    orderItems {\n      id\n      orderProduct {\n        name\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddProduct($product: ProductInput!) {\n  addProduct(product: $product) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n  }\n}"): (typeof documents)["mutation AddProduct($product: ProductInput!) {\n  addProduct(product: $product) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddProdVariation($product: ProductInput) {\n  addProductVariations(product: $product) {\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    brand {\n      id\n      name\n    }\n    description\n    stockCode\n    prodVariations {\n      name\n      prodVarOptions {\n        value\n      }\n    }\n    prodCombinations {\n      price\n      sku\n      combinationString\n      availableStock\n      variantImage {\n        link\n      }\n    }\n  }\n}"): (typeof documents)["mutation AddProdVariation($product: ProductInput) {\n  addProductVariations(product: $product) {\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    brand {\n      id\n      name\n    }\n    description\n    stockCode\n    prodVariations {\n      name\n      prodVarOptions {\n        value\n      }\n    }\n    prodCombinations {\n      price\n      sku\n      combinationString\n      availableStock\n      variantImage {\n        link\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation addSetting($setting: SettingInput!) {\n  addSetting(setting: $setting) {\n    __typename\n    callBack_url\n    access_token\n    app_id\n    app_secret\n    phone_number_id\n    business_account_id\n    access_token\n    api_version\n    webhook_verification_token\n    phone_number\n  }\n}"): (typeof documents)["mutation addSetting($setting: SettingInput!) {\n  addSetting(setting: $setting) {\n    __typename\n    callBack_url\n    access_token\n    app_id\n    app_secret\n    phone_number_id\n    business_account_id\n    access_token\n    api_version\n    webhook_verification_token\n    phone_number\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddStore($store: StoreInput!) {\n  addStore(store: $store) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"): (typeof documents)["mutation AddStore($store: StoreInput!) {\n  addStore(store: $store) {\n    __typename\n    id\n    name\n    createdAt\n    updatedAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddStripe($stripe: StripeSettingInput!) {\n  addStripe(stripe: $stripe) {\n    id\n    callback_url\n    webhook_secret\n    api_key\n  }\n}"): (typeof documents)["mutation AddStripe($stripe: StripeSettingInput!) {\n  addStripe(stripe: $stripe) {\n    id\n    callback_url\n    webhook_secret\n    api_key\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddTextMessage($message: TextMessageInput!, $participants: ParticipantsInput, $customerId: Int, $template: String) {\n  addTextMessage(\n    message: $message\n    participants: $participants\n    customerId: $customerId\n    template: $template\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    hasContext\n    timestamp\n    createdAt\n    text {\n      __typename\n      body\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation AddTextMessage($message: TextMessageInput!, $participants: ParticipantsInput, $customerId: Int, $template: String) {\n  addTextMessage(\n    message: $message\n    participants: $participants\n    customerId: $customerId\n    template: $template\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    hasContext\n    timestamp\n    createdAt\n    text {\n      __typename\n      body\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation AddVideoMessage($message: VideoMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addVideoMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    video {\n      __typename\n      url\n      sha256\n      mimeType\n      videoId\n      caption\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation AddVideoMessage($message: VideoMessageInput!, $template: String, $participants: ParticipantsInput, $customerId: Int) {\n  addVideoMessage(\n    message: $message\n    template: $template\n    participants: $participants\n    customerId: $customerId\n  ) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    messageId\n    video {\n      __typename\n      url\n      sha256\n      mimeType\n      videoId\n      caption\n    }\n    chat {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query CustomerChatSearch($page: Int, $limit: Int, $text: String!) {\n  customerChatSearch(page: $page, limit: $limit, text: $text) {\n    customers {\n      __typename\n      id\n      first_name\n      last_name\n      phone_number\n    }\n    chats {\n      __typename\n      id\n      customer {\n        __typename\n        id\n        first_name\n        last_name\n        phone_number\n      }\n      lastMessage {\n        __typename\n        id\n        from_customer\n        type\n        timestamp\n        createdAt\n        text {\n          body\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query CustomerChatSearch($page: Int, $limit: Int, $text: String!) {\n  customerChatSearch(page: $page, limit: $limit, text: $text) {\n    customers {\n      __typename\n      id\n      first_name\n      last_name\n      phone_number\n    }\n    chats {\n      __typename\n      id\n      customer {\n        __typename\n        id\n        first_name\n        last_name\n        phone_number\n      }\n      lastMessage {\n        __typename\n        id\n        from_customer\n        type\n        timestamp\n        createdAt\n        text {\n          body\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query CustomerSearch($page: Int, $limit: Int, $text: String!) {\n  customerSearch(page: $page, limit: $limit, text: $text) {\n    id\n    first_name\n    last_name\n    customerSegment\n    incomeCategory\n    phone_number\n    age\n    gender\n  }\n}"): (typeof documents)["query CustomerSearch($page: Int, $limit: Int, $text: String!) {\n  customerSearch(page: $page, limit: $limit, text: $text) {\n    id\n    first_name\n    last_name\n    customerSegment\n    incomeCategory\n    phone_number\n    age\n    gender\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query CustomersSearch($page: Int, $limit: Int, $text: String!) {\n  customersSearch(page: $page, limit: $limit, text: $text) {\n    __typename\n    id\n    first_name\n    last_name\n    phone_number\n  }\n}"): (typeof documents)["query CustomersSearch($page: Int, $limit: Int, $text: String!) {\n  customersSearch(page: $page, limit: $limit, text: $text) {\n    __typename\n    id\n    first_name\n    last_name\n    phone_number\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation deleteBillboard($billboardId: Int!, $storeId: Int!) {\n  deleteBillboard(billboardId: $billboardId, storeId: $storeId) {\n    response\n  }\n}"): (typeof documents)["mutation deleteBillboard($billboardId: Int!, $storeId: Int!) {\n  deleteBillboard(billboardId: $billboardId, storeId: $storeId) {\n    response\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteBrand($storeId: Int!, $brandId: Int!) {\n  deleteBrand(storeId: $storeId, brandId: $brandId) {\n    response\n  }\n}"): (typeof documents)["mutation DeleteBrand($storeId: Int!, $brandId: Int!) {\n  deleteBrand(storeId: $storeId, brandId: $brandId) {\n    response\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteCategory($categoryId: Int!, $storeId: Int!) {\n  deleteCategory(categoryId: $categoryId, storeId: $storeId) {\n    response\n  }\n}"): (typeof documents)["mutation DeleteCategory($categoryId: Int!, $storeId: Int!) {\n  deleteCategory(categoryId: $categoryId, storeId: $storeId) {\n    response\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteCoupon($promotionId: Int!, $storeId: Int!) {\n  deleteCoupon(promotionId: $promotionId, storeId: $storeId)\n}"): (typeof documents)["mutation DeleteCoupon($promotionId: Int!, $storeId: Int!) {\n  deleteCoupon(promotionId: $promotionId, storeId: $storeId)\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteDiscount($promotionId: Int!, $storeId: Int!) {\n  deleteDiscount(promotionId: $promotionId, storeId: $storeId)\n}"): (typeof documents)["mutation DeleteDiscount($promotionId: Int!, $storeId: Int!) {\n  deleteDiscount(promotionId: $promotionId, storeId: $storeId)\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteMpesa($mpesaId: Int!, $storeId: Int!) {\n  deleteMpesa(mpesaId: $mpesaId, storeId: $storeId) {\n    response\n  }\n}"): (typeof documents)["mutation DeleteMpesa($mpesaId: Int!, $storeId: Int!) {\n  deleteMpesa(mpesaId: $mpesaId, storeId: $storeId) {\n    response\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteProduct($productId: Int!, $storeId: Int!) {\n  deleteProduct(productId: $productId, storeId: $storeId) {\n    response\n  }\n}"): (typeof documents)["mutation DeleteProduct($productId: Int!, $storeId: Int!) {\n  deleteProduct(productId: $productId, storeId: $storeId) {\n    response\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteStore($storeId: Int!) {\n  deleteStore(storeId: $storeId) {\n    response\n  }\n}"): (typeof documents)["mutation DeleteStore($storeId: Int!) {\n  deleteStore(storeId: $storeId) {\n    response\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation DeleteStripe($stripeId: Int!, $storeId: Int!) {\n  deleteStripe(stripeId: $stripeId, storeId: $storeId) {\n    response\n  }\n}"): (typeof documents)["mutation DeleteStripe($stripeId: Int!, $storeId: Int!) {\n  deleteStripe(stripeId: $stripeId, storeId: $storeId) {\n    response\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAds {\n  ads {\n    __typename\n    id\n    read\n    delivered\n    sent\n    failed\n    response\n    updatedAt\n    adTemplate {\n      __typename\n      id\n      name\n    }\n  }\n}"): (typeof documents)["query GetAds {\n  ads {\n    __typename\n    id\n    read\n    delivered\n    sent\n    failed\n    response\n    updatedAt\n    adTemplate {\n      __typename\n      id\n      name\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCustomers {\n  customers {\n    id\n    whatsapp_name\n    phone_number\n    first_name\n    last_name\n    age\n    gender\n    incomeCategory\n    customerSegment\n    occupation\n    joinDate\n    lastPromoted\n    status\n    createdAt\n    customerLoyalty {\n      pointsBalance\n    }\n  }\n}"): (typeof documents)["query GetCustomers {\n  customers {\n    id\n    whatsapp_name\n    phone_number\n    first_name\n    last_name\n    age\n    gender\n    incomeCategory\n    customerSegment\n    occupation\n    joinDate\n    lastPromoted\n    status\n    createdAt\n    customerLoyalty {\n      pointsBalance\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAllProducts {\n  allProducts {\n    __typename\n    id\n    name\n    products {\n      __typename\n      id\n      name\n      price\n    }\n  }\n}"): (typeof documents)["query GetAllProducts {\n  allProducts {\n    __typename\n    id\n    name\n    products {\n      __typename\n      id\n      name\n      price\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAllStores {\n  stores {\n    __typename\n    id\n    name\n  }\n}"): (typeof documents)["query GetAllStores {\n  stores {\n    __typename\n    id\n    name\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetBillboard($billboardId: Int!) {\n  billboard(billboardId: $billboardId) {\n    __typename\n    id\n    label\n    imageUrl\n    store {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["query GetBillboard($billboardId: Int!) {\n  billboard(billboardId: $billboardId) {\n    __typename\n    id\n    label\n    imageUrl\n    store {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetBillboards($storeId: Int!) {\n  billboards(storeId: $storeId) {\n    __typename\n    id\n    label\n    updatedAt\n  }\n}"): (typeof documents)["query GetBillboards($storeId: Int!) {\n  billboards(storeId: $storeId) {\n    __typename\n    id\n    label\n    updatedAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetBrand($brandId: Int!) {\n  brand(brandId: $brandId) {\n    __typename\n    id\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}"): (typeof documents)["query GetBrand($brandId: Int!) {\n  brand(brandId: $brandId) {\n    __typename\n    id\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetBrands($storeId: Int!) {\n  brands(storeId: $storeId) {\n    __typename\n    id\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}"): (typeof documents)["query GetBrands($storeId: Int!) {\n  brands(storeId: $storeId) {\n    __typename\n    id\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCategories($storeId: Int!) {\n  categories(storeId: $storeId) {\n    __typename\n    id\n    name\n    updatedAt\n    billboard {\n      __typename\n      id\n      label\n    }\n  }\n}"): (typeof documents)["query GetCategories($storeId: Int!) {\n  categories(storeId: $storeId) {\n    __typename\n    id\n    name\n    updatedAt\n    billboard {\n      __typename\n      id\n      label\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCategory($categoryId: Int!) {\n  category(categoryId: $categoryId) {\n    __typename\n    id\n    name\n    billboard {\n      __typename\n      id\n      label\n      imageUrl\n    }\n  }\n}"): (typeof documents)["query GetCategory($categoryId: Int!) {\n  category(categoryId: $categoryId) {\n    __typename\n    id\n    name\n    billboard {\n      __typename\n      id\n      label\n      imageUrl\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetChat($chatId: Int!) {\n  chat(chatId: $chatId) {\n    conversations {\n      id\n      category\n      status\n      pricingModel\n      expiryDate\n    }\n    messages {\n      __typename\n      id\n      from_customer\n      type\n      timestamp\n      messageId\n      status\n      isAd\n      hasContext\n      context {\n        __typename\n        id\n        type\n        messageId\n        text {\n          __typename\n          body\n        }\n        video {\n          __typename\n          caption\n          url\n          mimeType\n        }\n        image {\n          __typename\n          caption\n          url\n        }\n        document {\n          __typename\n          url\n          caption\n          filename\n        }\n        interactive {\n          __typename\n          type\n          button {\n            __typename\n            body\n            product {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n              }\n            }\n          }\n          template {\n            __typename\n            id\n            body\n            tempProduct {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      text {\n        __typename\n        body\n      }\n      image {\n        __typename\n        caption\n        url\n      }\n      video {\n        __typename\n        caption\n        url\n        mimeType\n      }\n      document {\n        __typename\n        url\n        caption\n        filename\n        mimeType\n      }\n      interactive {\n        __typename\n        id\n        type\n        button {\n          __typename\n          id\n          header\n          btnImageHead {\n            __typename\n            link\n          }\n          btnTextHead {\n            __typename\n            body\n          }\n          body\n          footer\n          action\n          buttons {\n            __typename\n            buttonId\n            title\n          }\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        template {\n          __typename\n          id\n          header\n          tempImageHead {\n            __typename\n            link\n          }\n          tempTextHead {\n            __typename\n            body\n          }\n          body\n          action\n          buttons {\n            __typename\n            text\n          }\n          tempProduct {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        list {\n          __typename\n          id\n          header\n          listTextHead {\n            __typename\n            body\n          }\n          body\n          button\n          footer\n          sections {\n            __typename\n            title\n            rows {\n              __typename\n              id\n              buttonId\n              title\n              description\n              product {\n                __typename\n                id\n                name\n                price\n                store {\n                  __typename\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      mesListReply {\n        __typename\n        id\n        buttonId\n        title\n        description\n        listReply {\n          __typename\n          id\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              id\n              name\n            }\n          }\n        }\n      }\n      mesBtnReply {\n        __typename\n        id\n        title\n        buttonId\n        buttonReply {\n          __typename\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      mesTempReply {\n        __typename\n        id\n        text\n        tempReply {\n          __typename\n          tempProduct {\n            __typename\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      messageAd {\n        __typename\n        id\n        read\n        delivered\n        failed\n        sent\n        response\n      }\n      createdAt\n    }\n  }\n}"): (typeof documents)["query GetChat($chatId: Int!) {\n  chat(chatId: $chatId) {\n    conversations {\n      id\n      category\n      status\n      pricingModel\n      expiryDate\n    }\n    messages {\n      __typename\n      id\n      from_customer\n      type\n      timestamp\n      messageId\n      status\n      isAd\n      hasContext\n      context {\n        __typename\n        id\n        type\n        messageId\n        text {\n          __typename\n          body\n        }\n        video {\n          __typename\n          caption\n          url\n          mimeType\n        }\n        image {\n          __typename\n          caption\n          url\n        }\n        document {\n          __typename\n          url\n          caption\n          filename\n        }\n        interactive {\n          __typename\n          type\n          button {\n            __typename\n            body\n            product {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n              }\n            }\n          }\n          template {\n            __typename\n            id\n            body\n            tempProduct {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      text {\n        __typename\n        body\n      }\n      image {\n        __typename\n        caption\n        url\n      }\n      video {\n        __typename\n        caption\n        url\n        mimeType\n      }\n      document {\n        __typename\n        url\n        caption\n        filename\n        mimeType\n      }\n      interactive {\n        __typename\n        id\n        type\n        button {\n          __typename\n          id\n          header\n          btnImageHead {\n            __typename\n            link\n          }\n          btnTextHead {\n            __typename\n            body\n          }\n          body\n          footer\n          action\n          buttons {\n            __typename\n            buttonId\n            title\n          }\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        template {\n          __typename\n          id\n          header\n          tempImageHead {\n            __typename\n            link\n          }\n          tempTextHead {\n            __typename\n            body\n          }\n          body\n          action\n          buttons {\n            __typename\n            text\n          }\n          tempProduct {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        list {\n          __typename\n          id\n          header\n          listTextHead {\n            __typename\n            body\n          }\n          body\n          button\n          footer\n          sections {\n            __typename\n            title\n            rows {\n              __typename\n              id\n              buttonId\n              title\n              description\n              product {\n                __typename\n                id\n                name\n                price\n                store {\n                  __typename\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      mesListReply {\n        __typename\n        id\n        buttonId\n        title\n        description\n        listReply {\n          __typename\n          id\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              id\n              name\n            }\n          }\n        }\n      }\n      mesBtnReply {\n        __typename\n        id\n        title\n        buttonId\n        buttonReply {\n          __typename\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      mesTempReply {\n        __typename\n        id\n        text\n        tempReply {\n          __typename\n          tempProduct {\n            __typename\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      messageAd {\n        __typename\n        id\n        read\n        delivered\n        failed\n        sent\n        response\n      }\n      createdAt\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetConversation($chatId: Int!) {\n  chat(chatId: $chatId) {\n    conversations {\n      id\n      category\n      status\n      pricingModel\n      expiryDate\n    }\n  }\n}"): (typeof documents)["query GetConversation($chatId: Int!) {\n  chat(chatId: $chatId) {\n    conversations {\n      id\n      category\n      status\n      pricingModel\n      expiryDate\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetChats {\n  chats {\n    __typename\n    id\n    customer {\n      __typename\n      id\n      whatsapp_name\n      phone_number\n      first_name\n      last_name\n    }\n    status\n  }\n}"): (typeof documents)["query GetChats {\n  chats {\n    __typename\n    id\n    customer {\n      __typename\n      id\n      whatsapp_name\n      phone_number\n      first_name\n      last_name\n    }\n    status\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCusInChatInfo($chatId: Int!) {\n  chat(chatId: $chatId) {\n    customer {\n      __typename\n      id\n      first_name\n      last_name\n      phone_number\n    }\n  }\n}"): (typeof documents)["query GetCusInChatInfo($chatId: Int!) {\n  chat(chatId: $chatId) {\n    customer {\n      __typename\n      id\n      first_name\n      last_name\n      phone_number\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCustomer($customerId: Int!) {\n  customer(customerId: $customerId) {\n    id\n    whatsapp_name\n    phone_number\n    first_name\n    last_name\n    age\n    gender\n    incomeCategory\n    customerSegment\n    occupation\n    joinDate\n    lastPromoted\n    status\n    createdAt\n    customerLoyalty {\n      pointsBalance\n    }\n  }\n}"): (typeof documents)["query GetCustomer($customerId: Int!) {\n  customer(customerId: $customerId) {\n    id\n    whatsapp_name\n    phone_number\n    first_name\n    last_name\n    age\n    gender\n    incomeCategory\n    customerSegment\n    occupation\n    joinDate\n    lastPromoted\n    status\n    createdAt\n    customerLoyalty {\n      pointsBalance\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCustomer360($customerId: Int!) {\n  customer360(customerId: $customerId) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    createdAt\n    customerOrder {\n      __typename\n      orderID\n      id\n      isPaid\n      phone\n      address\n      status\n      updatedAt\n      orderItems {\n        id\n        price\n        quantity\n        orderProduct {\n          id\n          name\n        }\n      }\n      storeOrder {\n        __typename\n        id\n        name\n      }\n    }\n    __typename\n  }\n}"): (typeof documents)["query GetCustomer360($customerId: Int!) {\n  customer360(customerId: $customerId) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    createdAt\n    customerOrder {\n      __typename\n      orderID\n      id\n      isPaid\n      phone\n      address\n      status\n      updatedAt\n      orderItems {\n        id\n        price\n        quantity\n        orderProduct {\n          id\n          name\n        }\n      }\n      storeOrder {\n        __typename\n        id\n        name\n      }\n    }\n    __typename\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCustomerInfo($customerId: Int!) {\n  customer(customerId: $customerId) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    createdAt\n    __typename\n  }\n}"): (typeof documents)["query GetCustomerInfo($customerId: Int!) {\n  customer(customerId: $customerId) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    createdAt\n    __typename\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query LastMessage($chatId: Int!) {\n  lastMessage(chatId: $chatId) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    status\n    text {\n      __typename\n      body\n    }\n    image {\n      __typename\n      caption\n    }\n    document {\n      __typename\n      filename\n    }\n    video {\n      __typename\n      caption\n    }\n    interactive {\n      __typename\n      type\n      button {\n        __typename\n        body\n        footer\n      }\n      list {\n        __typename\n        body\n        button\n        footer\n      }\n      template {\n        __typename\n        body\n      }\n    }\n    mesListReply {\n      __typename\n      title\n      description\n      listReply {\n        __typename\n        product {\n          __typename\n          name\n          price\n        }\n      }\n    }\n    mesBtnReply {\n      __typename\n      title\n      buttonReply {\n        __typename\n        product {\n          name\n          price\n        }\n      }\n    }\n    mesTempReply {\n      __typename\n      text\n      tempReply {\n        __typename\n        tempProduct {\n          __typename\n          name\n          price\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query LastMessage($chatId: Int!) {\n  lastMessage(chatId: $chatId) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    createdAt\n    status\n    text {\n      __typename\n      body\n    }\n    image {\n      __typename\n      caption\n    }\n    document {\n      __typename\n      filename\n    }\n    video {\n      __typename\n      caption\n    }\n    interactive {\n      __typename\n      type\n      button {\n        __typename\n        body\n        footer\n      }\n      list {\n        __typename\n        body\n        button\n        footer\n      }\n      template {\n        __typename\n        body\n      }\n    }\n    mesListReply {\n      __typename\n      title\n      description\n      listReply {\n        __typename\n        product {\n          __typename\n          name\n          price\n        }\n      }\n    }\n    mesBtnReply {\n      __typename\n      title\n      buttonReply {\n        __typename\n        product {\n          name\n          price\n        }\n      }\n    }\n    mesTempReply {\n      __typename\n      text\n      tempReply {\n        __typename\n        tempProduct {\n          __typename\n          name\n          price\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetCurrentMerchant {\n  currentMerchant {\n    __typename\n    id\n    business_name\n    username\n  }\n}"): (typeof documents)["query GetCurrentMerchant {\n  currentMerchant {\n    __typename\n    id\n    business_name\n    username\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetMpesa($storeId: Int!) {\n  mpesa(storeId: $storeId) {\n    id\n    consumer_key\n    consumer_secret\n    pass_key\n    business_shortcode\n    account_reference\n    transaction_desc\n    callback_url\n  }\n}"): (typeof documents)["query GetMpesa($storeId: Int!) {\n  mpesa(storeId: $storeId) {\n    id\n    consumer_key\n    consumer_secret\n    pass_key\n    business_shortcode\n    account_reference\n    transaction_desc\n    callback_url\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetOrders($storeId: Int!) {\n  orders(storeId: $storeId) {\n    id\n    phone\n    isPaid\n    address\n    orderID\n    customerOrder {\n      first_name\n      last_name\n    }\n    orderItems {\n      id\n      price\n      quantity\n      orderProduct {\n        id\n        name\n        brand {\n          id\n          name\n        }\n        category {\n          name\n        }\n      }\n    }\n    createdAt\n  }\n}"): (typeof documents)["query GetOrders($storeId: Int!) {\n  orders(storeId: $storeId) {\n    id\n    phone\n    isPaid\n    address\n    orderID\n    customerOrder {\n      first_name\n      last_name\n    }\n    orderItems {\n      id\n      price\n      quantity\n      orderProduct {\n        id\n        name\n        brand {\n          id\n          name\n        }\n        category {\n          name\n        }\n      }\n    }\n    createdAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProduct($productId: Int!) {\n  product(productId: $productId) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    stockCode\n    description\n    brand {\n      id\n      name\n    }\n    images {\n      __typename\n      id\n      url\n    }\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n    prodVariations {\n      name\n      prodVarOptions {\n        value\n      }\n    }\n    prodCombinations {\n      price\n      sku\n      combinationString\n      availableStock\n      variantImage {\n        link\n      }\n    }\n  }\n}"): (typeof documents)["query GetProduct($productId: Int!) {\n  product(productId: $productId) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    stockCode\n    description\n    brand {\n      id\n      name\n    }\n    images {\n      __typename\n      id\n      url\n    }\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n    prodVariations {\n      name\n      prodVarOptions {\n        value\n      }\n    }\n    prodCombinations {\n      price\n      sku\n      combinationString\n      availableStock\n      variantImage {\n        link\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProducts($storeId: Int!, $categoryId: Int) {\n  products(storeId: $storeId, categoryId: $categoryId) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    updatedAt\n    description\n    stockCode\n    brand {\n      id\n      name\n    }\n    images {\n      __typename\n      id\n      url\n    }\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n  }\n}"): (typeof documents)["query GetProducts($storeId: Int!, $categoryId: Int) {\n  products(storeId: $storeId, categoryId: $categoryId) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    updatedAt\n    description\n    stockCode\n    brand {\n      id\n      name\n    }\n    images {\n      __typename\n      id\n      url\n    }\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProductsOfIds($productsIds: [Int], $storeId: Int) {\n  productsIds(productIds: $productsIds, storeId: $storeId) {\n    id\n    name\n    price\n  }\n}"): (typeof documents)["query GetProductsOfIds($productsIds: [Int], $storeId: Int) {\n  productsIds(productIds: $productsIds, storeId: $storeId) {\n    id\n    name\n    price\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetProductsOnly($storeId: Int!) {\n  products(storeId: $storeId) {\n    __typename\n    id\n    name\n    price\n    isFeatured\n    updatedAt\n  }\n}"): (typeof documents)["query GetProductsOnly($storeId: Int!) {\n  products(storeId: $storeId) {\n    __typename\n    id\n    name\n    price\n    isFeatured\n    updatedAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetPromotions($storeId: Int!) {\n  promotions(storeId: $storeId) {\n    __typename\n    id\n    name\n    startDate\n    endDate\n    description\n    discountType\n    active\n    discountValue\n    coupon {\n      __typename\n      id\n      code\n      validFrom\n      validTo\n      discount\n      active\n      createdAt\n    }\n    createdAt\n  }\n}"): (typeof documents)["query GetPromotions($storeId: Int!) {\n  promotions(storeId: $storeId) {\n    __typename\n    id\n    name\n    startDate\n    endDate\n    description\n    discountType\n    active\n    discountValue\n    coupon {\n      __typename\n      id\n      code\n      validFrom\n      validTo\n      discount\n      active\n      createdAt\n    }\n    createdAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetSetting($username: String) {\n  setting(username: $username) {\n    __typename\n    callBack_url\n    app_id\n    phone_number_id\n    business_account_id\n    access_token\n    app_secret\n    api_version\n    webhook_verification_token\n    phone_number\n  }\n}"): (typeof documents)["query GetSetting($username: String) {\n  setting(username: $username) {\n    __typename\n    callBack_url\n    app_id\n    phone_number_id\n    business_account_id\n    access_token\n    app_secret\n    api_version\n    webhook_verification_token\n    phone_number\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetStore($storeId: Int) {\n  store(storeId: $storeId) {\n    __typename\n    id\n    name\n  }\n}"): (typeof documents)["query GetStore($storeId: Int) {\n  store(storeId: $storeId) {\n    __typename\n    id\n    name\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetStripe($storeId: Int!) {\n  stripe(storeId: $storeId) {\n    id\n    api_key\n    webhook_secret\n    callback_url\n  }\n}"): (typeof documents)["query GetStripe($storeId: Int!) {\n  stripe(storeId: $storeId) {\n    id\n    api_key\n    webhook_secret\n    callback_url\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetTempMarketResponse($adTemplateId: Int!) {\n  tempMarketResponse(adTemplateId: $adTemplateId) {\n    id\n    name\n    leads\n    adTempProduct {\n      id\n      name\n      price\n      images {\n        id\n        url\n      }\n      store {\n        id\n        name\n      }\n    }\n    adTempMessage {\n      id\n      interactive {\n        template {\n          buttons {\n            text\n          }\n        }\n      }\n    }\n    adTempResponses {\n      id\n      cusTempLead {\n        id\n        phone_number\n        first_name\n        last_name\n      }\n      mesTempLead {\n        id\n        createdAt\n        chat {\n          id\n        }\n        mesTempReply {\n          text\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetTempMarketResponse($adTemplateId: Int!) {\n  tempMarketResponse(adTemplateId: $adTemplateId) {\n    id\n    name\n    leads\n    adTempProduct {\n      id\n      name\n      price\n      images {\n        id\n        url\n      }\n      store {\n        id\n        name\n      }\n    }\n    adTempMessage {\n      id\n      interactive {\n        template {\n          buttons {\n            text\n          }\n        }\n      }\n    }\n    adTempResponses {\n      id\n      cusTempLead {\n        id\n        phone_number\n        first_name\n        last_name\n      }\n      mesTempLead {\n        id\n        createdAt\n        chat {\n          id\n        }\n        mesTempReply {\n          text\n        }\n      }\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation loginMerchant($username: String!, $password: String!) {\n  loginMerchant(username: $username, password: $password) {\n    __typename\n    token\n    merchant {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation loginMerchant($username: String!, $password: String!) {\n  loginMerchant(username: $username, password: $password) {\n    __typename\n    token\n    merchant {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query ProductSearch($page: Int, $limit: Int, $text: String!, $storeId: Int!) {\n  productSearch(page: $page, limit: $limit, text: $text, storeId: $storeId) {\n    id\n    name\n    description\n    price\n    category {\n      name\n    }\n    images {\n      url\n    }\n  }\n}"): (typeof documents)["query ProductSearch($page: Int, $limit: Int, $text: String!, $storeId: Int!) {\n  productSearch(page: $page, limit: $limit, text: $text, storeId: $storeId) {\n    id\n    name\n    description\n    price\n    category {\n      name\n    }\n    images {\n      url\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation signupMerchant($username: String!, $password: String!, $email: String, $whatsapp_phone_number: String!) {\n  signupMerchant(\n    username: $username\n    password: $password\n    email: $email\n    whatsapp_phone_number: $whatsapp_phone_number\n  ) {\n    token\n    merchant {\n      __typename\n      id\n    }\n    __typename\n  }\n}"): (typeof documents)["mutation signupMerchant($username: String!, $password: String!, $email: String, $whatsapp_phone_number: String!) {\n  signupMerchant(\n    username: $username\n    password: $password\n    email: $email\n    whatsapp_phone_number: $whatsapp_phone_number\n  ) {\n    token\n    merchant {\n      __typename\n      id\n    }\n    __typename\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription chatAdded($merchantId: Int!) {\n  chatAdded(merchantId: $merchantId) {\n    id\n    customer {\n      id\n      first_name\n      last_name\n      phone_number\n      whatsapp_name\n    }\n    messages {\n      __typename\n      id\n      from_customer\n      type\n      timestamp\n      messageId\n      status\n      isAd\n      hasContext\n      context {\n        __typename\n        id\n        type\n        messageId\n        text {\n          __typename\n          body\n        }\n        video {\n          __typename\n          caption\n          url\n          mimeType\n        }\n        image {\n          __typename\n          caption\n          url\n        }\n        document {\n          __typename\n          url\n          caption\n          filename\n        }\n        interactive {\n          __typename\n          type\n          button {\n            __typename\n            body\n            product {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n              }\n            }\n          }\n          template {\n            __typename\n            id\n            body\n            tempProduct {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      text {\n        __typename\n        body\n      }\n      image {\n        __typename\n        caption\n        url\n      }\n      video {\n        __typename\n        caption\n        url\n        mimeType\n      }\n      document {\n        __typename\n        url\n        caption\n        filename\n        mimeType\n      }\n      interactive {\n        __typename\n        id\n        type\n        button {\n          __typename\n          id\n          header\n          btnImageHead {\n            __typename\n            link\n          }\n          btnTextHead {\n            __typename\n            body\n          }\n          body\n          footer\n          action\n          buttons {\n            __typename\n            buttonId\n            title\n          }\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        template {\n          __typename\n          id\n          header\n          tempImageHead {\n            __typename\n            link\n          }\n          tempTextHead {\n            __typename\n            body\n          }\n          body\n          action\n          buttons {\n            __typename\n            text\n          }\n          tempProduct {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        list {\n          __typename\n          id\n          header\n          listTextHead {\n            __typename\n            body\n          }\n          body\n          button\n          footer\n          sections {\n            __typename\n            title\n            rows {\n              __typename\n              id\n              buttonId\n              title\n              description\n              product {\n                __typename\n                id\n                name\n                price\n                store {\n                  __typename\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      mesListReply {\n        __typename\n        id\n        buttonId\n        title\n        description\n        listReply {\n          __typename\n          id\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              id\n              name\n            }\n          }\n        }\n      }\n      mesBtnReply {\n        __typename\n        id\n        title\n        buttonId\n        buttonReply {\n          __typename\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      mesTempReply {\n        __typename\n        id\n        text\n        tempReply {\n          __typename\n          tempProduct {\n            __typename\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      messageAd {\n        __typename\n        id\n        read\n        delivered\n        failed\n        sent\n      }\n      createdAt\n    }\n  }\n}"): (typeof documents)["subscription chatAdded($merchantId: Int!) {\n  chatAdded(merchantId: $merchantId) {\n    id\n    customer {\n      id\n      first_name\n      last_name\n      phone_number\n      whatsapp_name\n    }\n    messages {\n      __typename\n      id\n      from_customer\n      type\n      timestamp\n      messageId\n      status\n      isAd\n      hasContext\n      context {\n        __typename\n        id\n        type\n        messageId\n        text {\n          __typename\n          body\n        }\n        video {\n          __typename\n          caption\n          url\n          mimeType\n        }\n        image {\n          __typename\n          caption\n          url\n        }\n        document {\n          __typename\n          url\n          caption\n          filename\n        }\n        interactive {\n          __typename\n          type\n          button {\n            __typename\n            body\n            product {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n              }\n            }\n          }\n          template {\n            __typename\n            id\n            body\n            tempProduct {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      text {\n        __typename\n        body\n      }\n      image {\n        __typename\n        caption\n        url\n      }\n      video {\n        __typename\n        caption\n        url\n        mimeType\n      }\n      document {\n        __typename\n        url\n        caption\n        filename\n        mimeType\n      }\n      interactive {\n        __typename\n        id\n        type\n        button {\n          __typename\n          id\n          header\n          btnImageHead {\n            __typename\n            link\n          }\n          btnTextHead {\n            __typename\n            body\n          }\n          body\n          footer\n          action\n          buttons {\n            __typename\n            buttonId\n            title\n          }\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        template {\n          __typename\n          id\n          header\n          tempImageHead {\n            __typename\n            link\n          }\n          tempTextHead {\n            __typename\n            body\n          }\n          body\n          action\n          buttons {\n            __typename\n            text\n          }\n          tempProduct {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        list {\n          __typename\n          id\n          header\n          listTextHead {\n            __typename\n            body\n          }\n          body\n          button\n          footer\n          sections {\n            __typename\n            title\n            rows {\n              __typename\n              id\n              buttonId\n              title\n              description\n              product {\n                __typename\n                id\n                name\n                price\n                store {\n                  __typename\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      mesListReply {\n        __typename\n        id\n        buttonId\n        title\n        description\n        listReply {\n          __typename\n          id\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              id\n              name\n            }\n          }\n        }\n      }\n      mesBtnReply {\n        __typename\n        id\n        title\n        buttonId\n        buttonReply {\n          __typename\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      mesTempReply {\n        __typename\n        id\n        text\n        tempReply {\n          __typename\n          tempProduct {\n            __typename\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      messageAd {\n        __typename\n        id\n        read\n        delivered\n        failed\n        sent\n      }\n      createdAt\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "subscription messageAdded($chatId: Int!) {\n  messageAdded(chatId: $chatId) {\n    message {\n      __typename\n      id\n      from_customer\n      type\n      timestamp\n      messageId\n      status\n      isAd\n      hasContext\n      context {\n        __typename\n        id\n        type\n        messageId\n        text {\n          __typename\n          body\n        }\n        video {\n          __typename\n          caption\n          url\n          mimeType\n        }\n        image {\n          __typename\n          caption\n          url\n        }\n        document {\n          __typename\n          url\n          caption\n          filename\n        }\n        interactive {\n          __typename\n          type\n          button {\n            __typename\n            body\n            product {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n              }\n            }\n          }\n          template {\n            __typename\n            id\n            body\n            tempProduct {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      text {\n        __typename\n        body\n      }\n      image {\n        __typename\n        caption\n        url\n      }\n      video {\n        __typename\n        caption\n        url\n        mimeType\n      }\n      document {\n        __typename\n        url\n        caption\n        filename\n        mimeType\n      }\n      interactive {\n        __typename\n        id\n        type\n        button {\n          __typename\n          id\n          header\n          btnImageHead {\n            __typename\n            link\n          }\n          btnTextHead {\n            __typename\n            body\n          }\n          body\n          footer\n          action\n          buttons {\n            __typename\n            buttonId\n            title\n          }\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        template {\n          __typename\n          id\n          header\n          tempImageHead {\n            __typename\n            link\n          }\n          tempTextHead {\n            __typename\n            body\n          }\n          body\n          action\n          buttons {\n            __typename\n            text\n          }\n          tempProduct {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        list {\n          __typename\n          id\n          header\n          listTextHead {\n            __typename\n            body\n          }\n          body\n          button\n          footer\n          sections {\n            __typename\n            title\n            rows {\n              __typename\n              id\n              buttonId\n              title\n              description\n              product {\n                __typename\n                id\n                name\n                price\n                store {\n                  __typename\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      mesListReply {\n        __typename\n        id\n        buttonId\n        title\n        description\n        listReply {\n          __typename\n          id\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              id\n              name\n            }\n          }\n        }\n      }\n      mesBtnReply {\n        __typename\n        id\n        title\n        buttonId\n        buttonReply {\n          __typename\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      mesTempReply {\n        __typename\n        id\n        text\n        tempReply {\n          __typename\n          tempProduct {\n            __typename\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      messageAd {\n        __typename\n        id\n        read\n        delivered\n        failed\n        sent\n      }\n      createdAt\n    }\n  }\n}"): (typeof documents)["subscription messageAdded($chatId: Int!) {\n  messageAdded(chatId: $chatId) {\n    message {\n      __typename\n      id\n      from_customer\n      type\n      timestamp\n      messageId\n      status\n      isAd\n      hasContext\n      context {\n        __typename\n        id\n        type\n        messageId\n        text {\n          __typename\n          body\n        }\n        video {\n          __typename\n          caption\n          url\n          mimeType\n        }\n        image {\n          __typename\n          caption\n          url\n        }\n        document {\n          __typename\n          url\n          caption\n          filename\n        }\n        interactive {\n          __typename\n          type\n          button {\n            __typename\n            body\n            product {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n              }\n            }\n          }\n          template {\n            __typename\n            id\n            body\n            tempProduct {\n              __typename\n              id\n              name\n              price\n              store {\n                __typename\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      text {\n        __typename\n        body\n      }\n      image {\n        __typename\n        caption\n        url\n      }\n      video {\n        __typename\n        caption\n        url\n        mimeType\n      }\n      document {\n        __typename\n        url\n        caption\n        filename\n        mimeType\n      }\n      interactive {\n        __typename\n        id\n        type\n        button {\n          __typename\n          id\n          header\n          btnImageHead {\n            __typename\n            link\n          }\n          btnTextHead {\n            __typename\n            body\n          }\n          body\n          footer\n          action\n          buttons {\n            __typename\n            buttonId\n            title\n          }\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        template {\n          __typename\n          id\n          header\n          tempImageHead {\n            __typename\n            link\n          }\n          tempTextHead {\n            __typename\n            body\n          }\n          body\n          action\n          buttons {\n            __typename\n            text\n          }\n          tempProduct {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n        list {\n          __typename\n          id\n          header\n          listTextHead {\n            __typename\n            body\n          }\n          body\n          button\n          footer\n          sections {\n            __typename\n            title\n            rows {\n              __typename\n              id\n              buttonId\n              title\n              description\n              product {\n                __typename\n                id\n                name\n                price\n                store {\n                  __typename\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      mesListReply {\n        __typename\n        id\n        buttonId\n        title\n        description\n        listReply {\n          __typename\n          id\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              id\n              name\n            }\n          }\n        }\n      }\n      mesBtnReply {\n        __typename\n        id\n        title\n        buttonId\n        buttonReply {\n          __typename\n          product {\n            __typename\n            id\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      mesTempReply {\n        __typename\n        id\n        text\n        tempReply {\n          __typename\n          tempProduct {\n            __typename\n            name\n            price\n            store {\n              __typename\n              id\n              name\n            }\n          }\n        }\n      }\n      messageAd {\n        __typename\n        id\n        read\n        delivered\n        failed\n        sent\n      }\n      createdAt\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateBillboard($billboardId: Int!, $payload: BillboardInput!) {\n  updateBillboard(billboardId: $billboardId, payload: $payload) {\n    __typename\n    id\n    label\n    imageUrl\n    store {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation UpdateBillboard($billboardId: Int!, $payload: BillboardInput!) {\n  updateBillboard(billboardId: $billboardId, payload: $payload) {\n    __typename\n    id\n    label\n    imageUrl\n    store {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateBrand($payload: BrandInput!, $brandId: Int!) {\n  updateBrand(payload: $payload, brandId: $brandId) {\n    __typename\n    id\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}"): (typeof documents)["mutation UpdateBrand($payload: BrandInput!, $brandId: Int!) {\n  updateBrand(payload: $payload, brandId: $brandId) {\n    __typename\n    id\n    name\n    joinDate\n    description\n    phoneNumber\n    industry\n    loc_name\n    loc_address\n    loc_latitude\n    loc_longitude\n    loc_url\n    storeId\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCategory($categoryId: Int!, $payload: CategoryInput!) {\n  updateCategory(categoryId: $categoryId, payload: $payload) {\n    __typename\n    id\n    name\n    billboard {\n      __typename\n      id\n    }\n    store {\n      __typename\n      id\n    }\n  }\n}"): (typeof documents)["mutation UpdateCategory($categoryId: Int!, $payload: CategoryInput!) {\n  updateCategory(categoryId: $categoryId, payload: $payload) {\n    __typename\n    id\n    name\n    billboard {\n      __typename\n      id\n    }\n    store {\n      __typename\n      id\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCoupon($promotionId: Int!, $payload: CouponPromInput) {\n  updateCoupon(promotionId: $promotionId, payload: $payload) {\n    __typename\n    id\n    name\n    description\n    discountType\n    coupon {\n      __typename\n      id\n      validFrom\n      validTo\n      discount\n      active\n      createdAt\n      updatedAt\n    }\n  }\n}"): (typeof documents)["mutation UpdateCoupon($promotionId: Int!, $payload: CouponPromInput) {\n  updateCoupon(promotionId: $promotionId, payload: $payload) {\n    __typename\n    id\n    name\n    description\n    discountType\n    coupon {\n      __typename\n      id\n      validFrom\n      validTo\n      discount\n      active\n      createdAt\n      updatedAt\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateCustomer($customerId: Int!, $payload: CustomerInput!) {\n  updateCustomer(customerId: $customerId, payload: $payload) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    __typename\n  }\n}"): (typeof documents)["mutation UpdateCustomer($customerId: Int!, $payload: CustomerInput!) {\n  updateCustomer(customerId: $customerId, payload: $payload) {\n    id\n    whatsapp_name\n    first_name\n    last_name\n    phone_number\n    __typename\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateDiscount($promotionId: Int!, $payload: DiscountPromInput) {\n  updateDiscount(promotionId: $promotionId, payload: $payload) {\n    __typename\n    id\n    name\n    startDate\n    endDate\n    description\n    discountType\n    active\n    discountValue\n    createdAt\n    updatedAt\n  }\n}"): (typeof documents)["mutation UpdateDiscount($promotionId: Int!, $payload: DiscountPromInput) {\n  updateDiscount(promotionId: $promotionId, payload: $payload) {\n    __typename\n    id\n    name\n    startDate\n    endDate\n    description\n    discountType\n    active\n    discountValue\n    createdAt\n    updatedAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateMessageStatus($id: Int!, $messageId: String) {\n  updateMessageStatus(id: $id, messageId: $messageId) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    status\n    messageId\n    text {\n      __typename\n      body\n    }\n    image {\n      __typename\n      caption\n      url\n    }\n    createdAt\n  }\n}"): (typeof documents)["mutation UpdateMessageStatus($id: Int!, $messageId: String) {\n  updateMessageStatus(id: $id, messageId: $messageId) {\n    __typename\n    id\n    from_customer\n    type\n    timestamp\n    status\n    messageId\n    text {\n      __typename\n      body\n    }\n    image {\n      __typename\n      caption\n      url\n    }\n    createdAt\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateMpesa($mpesaId: Int!, $payload: MpesaSettingInput!) {\n  updateMpesa(mpesaId: $mpesaId, payload: $payload) {\n    id\n    consumer_key\n    consumer_secret\n    pass_key\n    business_shortcode\n    account_reference\n    transaction_desc\n  }\n}"): (typeof documents)["mutation UpdateMpesa($mpesaId: Int!, $payload: MpesaSettingInput!) {\n  updateMpesa(mpesaId: $mpesaId, payload: $payload) {\n    id\n    consumer_key\n    consumer_secret\n    pass_key\n    business_shortcode\n    account_reference\n    transaction_desc\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateOrderCheckout($orderId: Int!, $storeId: Int!, $payload: OrderCheckoutInput!) {\n  updateOrderCheckout(orderId: $orderId, storeId: $storeId, payload: $payload) {\n    id\n    isPaid\n    phone\n    storeOrder {\n      id\n      name\n    }\n    customerOrder {\n      id\n      phone_number\n    }\n    orderItems {\n      id\n      productId\n      quantity\n    }\n  }\n}"): (typeof documents)["mutation UpdateOrderCheckout($orderId: Int!, $storeId: Int!, $payload: OrderCheckoutInput!) {\n  updateOrderCheckout(orderId: $orderId, storeId: $storeId, payload: $payload) {\n    id\n    isPaid\n    phone\n    storeOrder {\n      id\n      name\n    }\n    customerOrder {\n      id\n      phone_number\n    }\n    orderItems {\n      id\n      productId\n      quantity\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateProduct($productId: Int!, $payload: ProductInput!) {\n  updateProduct(productId: $productId, payload: $payload) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    brand {\n      id\n      name\n    }\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n  }\n}"): (typeof documents)["mutation UpdateProduct($productId: Int!, $payload: ProductInput!) {\n  updateProduct(productId: $productId, payload: $payload) {\n    __typename\n    id\n    name\n    price\n    isArchived\n    isFeatured\n    brand {\n      id\n      name\n    }\n    store {\n      __typename\n      id\n      name\n    }\n    category {\n      __typename\n      id\n      name\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation updateStore($storeId: Int!, $payload: StoreInput!) {\n  updateStore(storeId: $storeId, payload: $payload) {\n    __typename\n    id\n    name\n  }\n}"): (typeof documents)["mutation updateStore($storeId: Int!, $payload: StoreInput!) {\n  updateStore(storeId: $storeId, payload: $payload) {\n    __typename\n    id\n    name\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "mutation UpdateStripe($stripeId: Int!, $payload: StripeSettingInput!) {\n  updateStripe(stripeId: $stripeId, payload: $payload) {\n    id\n    api_key\n    callback_url\n    webhook_secret\n  }\n}"): (typeof documents)["mutation UpdateStripe($stripeId: Int!, $payload: StripeSettingInput!) {\n  updateStripe(stripeId: $stripeId, payload: $payload) {\n    id\n    api_key\n    callback_url\n    webhook_secret\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;